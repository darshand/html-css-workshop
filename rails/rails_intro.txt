Creating new rails app/project
  rails new appname

Directory structure
  app
  db
  lib

We can also create a working rails app by manually creating controller, view and adding routes to these files.
  - Touch app/controller/users_controller.ruby
    - this should inherit from ApplicationController and an home method
  - Touch app/views/users/home.html.erb
  - Edit route file
    - root to: 'pages#home'

Creating a controller
  rails generate controller <controller_name> <method_name>
  ex: rails g controller pages home
    - which will creat
      - controller file in app/controller folder
      - view file (html.erb) in app/views
      - route for this file in config/routes.ruby
      - and other helper files and test files.

Gemfile
  Lists the names of libraries/gem we are using in this project.
  Gem : libraries prewritten and made public to use for others.
  All available gems are listed in https://rubygems.org/.

Gemfile.lock
  (Autogenerated: snapshot of installed and working gem versions, updates when 'bundle install' or 'bundle update')
  Stores specific version of the gems installed and associated gems for that version. This helps when you try to install your application in another machine, rails refer this file to install gems based on this version and subversions.

COMMON COMMANDS USED IN RAILS PROJECTS
  bundle install
    - Will install the gems which are added newly to Gemfile.

  bundle install
    - Will update the versions of gems.
    - if we change the gem version manually, it will update gem to specified version.

Adding root route
  - setting up root url is simpler. in route file, 
    - root to: 'pages#home'
    - or short hand root '<controller>#<action>', i,e root 'pages#home'

Adding routes
  - Adding routes is also simpler
    - <http type> '<route_name>', to: '<controller_name>#<action_name>'
    - get 'about', to: 'pages#about'

Installing fonts
  - I am installing google fonts which are under OFL(Open Font License) and we are free to use, modify and distribute.
  - goto fonts.google.com and select which font you like. on selecting fonts we will get a link to add those to application. copy that link and paste it in app/views/layouts/application.html.erb. Now fonts are available to our project. whenever our project runs it goes to that link and fetches fonts.
  - Using those fonts are simple, go to app/assets/stylesheets/application.css and add font-family: '<font name>', <backup font name>

Adding bootstrap
  - We can add bootstrap to our project as external link
    - go to https://getbootstrap.com/ site, copy bootstrap cdn css link and paste it into app/views/layouts/application.html.erb.
  - BUT, we have a gem for doing all these.
    - add 'gem bootstrap-sass' to gemfile and bundle install.
    - rename app/assets/stylesheets/application.css to app/assets/stylesheets/application.css.scss
    - import bootstrap
      - @import bootstrap-sprockets;
      - @import bootstrap;
    - to check, add a div around yield in app/views/layouts/application.html.erb with div class 'container'. and check application (restart if not working)

Adding bootstrap navbars
  - Goto getbootstrap.com and select appropriate version document for reference and go to navbar section.
  - Refere/read and select required code for our app and add it to application.html.erb cz we need this bar in all pages.
    - By default class will be container-fluid, change it to container.
    - Select nav bar brand and list to add nav bar elements.
    - Link them appropriately (brand to home[/], and other with routes[/about, /contact])

Adding Background Gradients
  - Go to any online css Gradients generator sites (https://uigradients.com)
  - Select suitable gradient css for your application.
  - Since we need this grandient as background for all our pages set this to body tag in application.css.scss file.
  - If we reload body will be changed, but navbar color is default.
  - So add navbar also with the same css code as of body (comma separated, body, .navbar { CSS })
  - But still border of navbar is not changed, so we will hide border for navbar
    - .navbar { border: none; }

Limiting gradients to Home page
  - Remove class='container' for whole app.
  - Added grandient to navbar background.
  - Fix margin of text with navbar.
  - Add padding to look more nice.

Navbar text coloring
  - We can try to set colors of any css tag in browser by inspecting that element.
  - But while using bootstrap, it will not work the same. Because it maintain some rules called CSS specificity.
  - We have to inspect and see where color are overriding and need to copy that css path inorder to set color/sttyle.
  - Similar way, we can check hover styles in inspect tool by selecting :hov in right end side of inspect tool.
